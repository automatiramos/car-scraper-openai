#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
-----------------------------------
‚Ä¢ Env√≠a la lista completa de coches para un AN√ÅLISIS COMPARATIVO y una RECOMENDACI√ìN clara orientada a rentabilidad en Amovens (renting + subalquiler).
"""

import json
import os
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime
from typing import List, Dict

# 1) ------------- Cargar clave desde .env -----------------
load_dotenv()
client = OpenAI()

# Crear directorio de datos si no existe
DATA_DIR = os.path.join(os.getcwd(), "data")
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

FICHERO_ENTRADA = os.getenv("ARCHIVO_COCHES", os.path.join(DATA_DIR, "coches.json"))
MODELO_ANALISIS = os.getenv("OPENAI_MODEL_ANALISIS", "gpt-4o-mini")

# 2) ------------- Prompt para an√°lisis --------------------------------

PROMPT_ANALISIS_SYSTEM = """
Eres un analista de movilidad y rentabilidad para renting + subalquiler P2P en Amovens.
Tu objetivo: elegir el coche que maximize el beneficio neto mensual (ingresos por alquiler - coste renting - comisiones - costes variables), cumpliendo las restricciones dadas.

Contexto clave (usar estrictamente):
- Ubicaci√≥n: Madrid centro (alta demanda urbana y escapadas). Priorizaci√≥n ambiental: distintivo 0 preferente. Si contradice otras restricciones del usuario (p. ej. descartar el√©ctricos), entonces prioriza ECO; si no hay ECO v√°lidos, usa C como √∫ltima opci√≥n y justifica.
- El usuario descarta el√©ctricos puros (BEV). PHEV s√≥lo si encaja con el resto de requisitos (ojo: suelen ser autom√°ticos).
- Transmisi√≥n preferida: manual.
- Plazas: m√≠nimo 5. Maletero: razonable para viajes (val√≥ralo si hay datos).
- Extras valorados: CarPlay/Android Auto y sensores.
- Ocupaci√≥n objetivo: 12-15 d√≠as/mes.
- Perfil: particular (no considerar deducciones de IVA).

Estimaci√≥n de precio/d√≠a (cuando no haya datos de mercado expl√≠citos):
- Parte de un precio base por segmento y uso urbano-turismo en Madrid y ajusta:
  ‚Ä¢ Segmento B/compacto manual: base 27-33 ‚Ç¨/d√≠a.
  ‚Ä¢ SUV compacto manual: base 40-45 ‚Ç¨/d√≠a.
- Ajustes:
  ‚Ä¢ Cambio autom√°tico: +10% (pero el usuario prefiere manual; si es autom√°tico y el resto compensa, justif√≠calo).
  ‚Ä¢ H√≠brido/PHEV: +5-10% si aporta etiqueta y ahorro real.
  ‚Ä¢ Di√©sel en ciudad: -5% salvo que sea claramente eficiente para viajes largos.
  ‚Ä¢ CarPlay/Android Auto y sensores: +5%.
  ‚Ä¢ Estacionalidad (verano/puentes): +10-15% (apl√≠calo s√≥lo en tabla de sensibilidad).
- Si alguna estimaci√≥n es incierta, usa el punto medio del rango y deja claro el supuesto.

C√°lculo econ√≥mico:
- Ingresos por alquiler = precio_d√≠a_estimado * d√≠as_ocupaci√≥n * (1 - comisi√≥n_amovens)
- Comisi√≥n Amovens: si no se indica, asume 20% (expresa este supuesto).
- Costes variables: combustible/energ√≠a a cargo del inquilino (ign√≥ralos). Considera un peque√±o % de riesgos/limpieza imprevista si lo crees necesario (1-3%).
- Coste renting mensual: usa el campo "precio" (se asume IVA incluido).
- Beneficio neto mensual = ingresos - renting - otros costes asumidos.

FORMATO DE SALIDA ESPEC√çFICO (TEXTO PLANO para correo electr√≥nico):

===========================================
üöó AN√ÅLISIS DE RENTABILIDAD - COCHES RENTING
===========================================

üìÖ Fecha: [FECHA_ACTUAL]
üìç Ubicaci√≥n: Madrid  
üéØ Objetivo: Renting + Subalquiler P2P

SUPUESTOS DE AN√ÅLISIS:
- Ocupaci√≥n esperada: 12 a 15 d√≠as/mes
- Comisi√≥n Amovens: 20%
- Filtros: Manual preferente, descartados el√©ctricos puros
- Precios base por segmento en Madrid

COMPARATIVA COMPLETA:
[Tabla con formato fijo de columnas usando espacios]

TOP 3 RECOMENDADOS:
ü•á [Modelo] - [Puntuaci√≥n]/100
   üí∞ Beneficio neto: [X]‚Ç¨/mes | Precio: [Y]‚Ç¨/mes
   üîó https://amovens.com/leasing/ald/[ID]
   üìù [Justificaci√≥n en 3 l√≠neas]
   üìã DATOS COMPLETOS DEL COCHE:
   {JSON completo del coche con todos los datos scrapeados}

ü•à [Modelo] - [Puntuaci√≥n]/100  
   üí∞ Beneficio neto: [X]‚Ç¨/mes | Precio: [Y]‚Ç¨/mes
   üîó https://amovens.com/leasing/ald/[ID]
   üìù [Justificaci√≥n en 3 l√≠neas]
   üìã DATOS COMPLETOS DEL COCHE:
   {JSON completo del coche con todos los datos scrapeados}

ü•â [Modelo] - [Puntuaci√≥n]/100
   üí∞ Beneficio neto: [X]‚Ç¨/mes | Precio: [Y]‚Ç¨/mes
   üîó https://amovens.com/leasing/ald/[ID]
   üìù [Justificaci√≥n en 3 l√≠neas]
   üìã DATOS COMPLETOS DEL COCHE:
   {JSON completo del coche con todos los datos scrapeados}

RECOMENDACI√ìN FINAL:
[Recomendaci√≥n clara y justificaci√≥n econ√≥mica]

===========================================

Si faltan datos (p. ej. maletero), ind√≠calo y no penalices en exceso; usa inferencias prudentes por segmento.
Usa este formato EXACTO para facilitar el env√≠o por email.
"""

PROMPT_ANALISIS_USER_TEMPLATE = """
Aqu√≠ tienes la lista de coches disponibles para renting en Amovens. Cada coche incluye:
- url: enlace directo al anuncio 
- modelo, a√±o, precio (cuota mensual), uso (Seminuevo)
- motor_info, km_por_a√±o, descripcion, emisiones de co2
- localizaci√≥n, kilometraje, color, neum√°ticos, etc.

Analiza comparativamente y recomienda el m√°s rentable usando el FORMATO ESPEC√çFICO indicado en las instrucciones del sistema.

OBLIGATORIO: 
1. Usar el formato exacto con t√≠tulos, tablas y emojis especificados
2. Incluir URLs completas en el TOP 3
3. Crear tabla comparativa con columnas alineadas usando espacios (SIN incluir "Coste renting", solo usar precio/mes)
4. Usar separadores visuales (=======) para secciones
5. IMPORTANTE: En cada coche del TOP 3, incluir el JSON completo con TODOS los datos scrapeados bajo "üìã DATOS COMPLETOS DEL COCHE"

El an√°lisis debe ser directo, profesional y listo para enviar por email con toda la informaci√≥n detallada.

COCHES DISPONIBLES:
{json_coches}
"""

# 3) ------------- An√°lisis comparativo con ChatGPT -------------
def analizar_coches_para_renting(lista_coches: List[Dict]) -> str:
    """
    Env√≠a la lista completa de coches y obtiene un an√°lisis comparativo y una recomendaci√≥n clara.
    """
    # (Opcional) pre-normalizar campos √∫tiles para el an√°lisis
    coches_norm = []
    for c in lista_coches:
        coches_norm.append({
            **c
        })

    json_coches = json.dumps(coches_norm, ensure_ascii=False, indent=2)
    user_msg = PROMPT_ANALISIS_USER_TEMPLATE.format(json_coches=json_coches)

    resp = client.chat.completions.create(
        model=MODELO_ANALISIS,
        temperature=0.2,
        messages=[
            {"role": "system", "content": PROMPT_ANALISIS_SYSTEM},
            {"role": "user", "content": user_msg}
        ]
    )
    return resp.choices[0].message.content.strip()

# 4) ------------- Carga de datos -------------------------
def cargar_coches(path: str):
    """Generador de dicts coche desde JSON o JSONL."""
    if not path or not os.path.exists(path):
        raise FileNotFoundError(f"No se encontr√≥ ARCHIVO_COCHES: {path}")
    with open(path, "r", encoding="utf-8") as f:
        primero = f.read(1)
        f.seek(0)
        if primero == "[":
            for coche in json.load(f):
                yield coche
        else:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                yield json.loads(line)

# 5) ------------- Script principal -----------------------
if __name__ == "__main__":
    coches_lista = list(cargar_coches(FICHERO_ENTRADA))
    
    if not coches_lista:
        print("‚ÑπÔ∏è No se encontraron coches para analizar.")
        exit(1)
    
    print(f"üìä Analizando {len(coches_lista)} coches para renting...")
    
    try:
        analisis = analizar_coches_para_renting(coches_lista)
        date_tag = datetime.now().strftime("%Y-%m-%d_%H-%M")
        out_file = os.path.join(DATA_DIR, f"analisis_rentabilidad_{date_tag}.txt")
        
        with open(out_file, "w", encoding="utf-8") as f:
            f.write(analisis)
        
        print(f"\nüìà An√°lisis comparativo guardado en: {out_file}\n")
        print(analisis)
        
    except Exception as e:
        print(f"‚ùå Error generando an√°lisis: {e}")
